//
// WARNING: All edits here will be lost!!!
// Do not edit this file manually, because it will be overwritten on application start to keep the port in sync!
//
// We are using vanilla JS and jQuery here. For more information please watch this:
// https://www.youtube.com/watch?v=Uo3cL4nrGOk
//

var pollingInterval;
var timer = 1000;
var retryCounter = 0;

// game data to be used
var data;

// some status variables
var isServiceConnected = true;
var isGameConnected = false;
var isGamePaused = false;
var onJob = false;
var train = false;
var ferry = false;

$(function () {
    console.log("Document ready!");
    setPollingInterval();
});

function setPollingInterval() {
    clearInterval(pollingInterval);
    pollingInterval = setInterval(function () {
        execute();
    }, timer);
}

// Slow down polling interval when connection is lost
function checkPollingInterval() {
    if (retryCounter === 10 && timer === 100) {
        isServiceConnected = false;
        console.log("Too many connection errors: changing interval to 1sec...");
        timer = 1000;
        setPollingInterval();
    }
    if (retryCounter === 19 && timer === 1000) {
        console.log("Too many connection errors: changing interval to 10secs and hiding '.game-connected'...");
        timer = 10000;
        setPollingInterval();

        $('.game-connected').css({
            'visibility': 'hidden'
        });
    }
    else if (retryCounter === 0 && timer > 100) {
        isServiceConnected = true;
        console.log("We are back to business! Changing interval to 100ms...");
        timer = 100;
        setPollingInterval();
    }
}

// Run that creepy thing!
function execute() {
    $.getJSON("http://localhost:{{port}}/", function (json) {
        data = json;
    })
        .done(function () {
            retryCounter = 0;
            checkPollingInterval();
        })
        .fail(function () {
            retryCounter++;
            checkPollingInterval();
        })
        .always(function () {
            updateStatus();
            if (typeof executeOverlay === "function" && data !== undefined) {
                // This function should be used inside the overlay html to be executed
                // no idea if that makes sense to anybody...
                executeOverlay();
            }
        });
}

// Set some variables and manipulate styles
// Honestly! No clue how to do this in a proper way...
function updateStatus() {
    $('.on-job').css({
        'visibility': ''
    });
    $('.train').css({
        'visibility': ''
    });
    $('.ferry').css({
        'visibility': ''
    });
    $('.game-paused').css({
        'visibility': ''
    });
    $('.game-connected').css({
        'visibility': ''
    });

    if (data !== undefined && data.SpecialEventsValues.OnJob) {
        onJob = true;
    }
    else {
        $('.on-job').css({
            'visibility': 'hidden'
        });
        onJob = false;
    }

    if (data !== undefined && data.SpecialEventsValues.Train) {
        $('.train').css({
            'visibility': 'hidden'
        });
        train = true;
    }
    else {
        train = false;
    }

    if (data !== undefined && data.SpecialEventsValues.Ferry) {
        $('.ferry').css({
            'visibility': 'hidden'
        });
        ferry = true;
    }
    else {
        ferry = false;
    }

    if (data !== undefined && data.Paused) {
        $('.game-paused').css({
            'visibility': 'hidden'
        });
        isGamePaused = true;
    }
    else {
        isGamePaused = false;
    }

    if (data !== undefined && data.SdkActive && isServiceConnected) {
        isGameConnected = true;
    }
    else {
        $('.game-connected').css({
            'visibility': 'hidden'
        });
        isGameConnected = false;
    }
}